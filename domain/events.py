# l3_engine/domain/events.py
from dataclasses import dataclass, field
from decimal import Decimal
from typing import Optional

from .enums import (EventType, Side, OrderCommand, OrderType, OrderStatus)

@dataclass
class Event:
    """Base class for all events, ensuring they are sortable by time."""
    timestamp: int # Nanoseconds since epoch
    event_type: EventType

    def __lt__(self, other):
        """Allows events to be sorted chronologically in a priority queue."""
        if not isinstance(other, Event):
            return NotImplemented
        return self.timestamp < other.timestamp

@dataclass
class MarketData_TradeEvent(Event):
    """Represents a single trade that occurred on the market."""
    symbol: str
    price: Decimal
    quantity: int
    side: Side # Aggressor side

@dataclass
class MarketData_DepthEvent(Event):
    """Represents an update to the limit order book."""
    symbol: str
    price: Decimal
    quantity: int
    side: Side # Which side of the book (Bid or Ask)
    command: OrderCommand
    flags: int
    num_orders: Optional[int] = field(default=None)

@dataclass
class SignalEvent(Event):
    """Represents a trading signal generated by a strategy."""
    strategy_id: str
    symbol: str
    direction: Side
    order_type: OrderType
    quantity: int
    limit_price: Optional[Decimal] = None
    stop_price: Optional[Decimal] = None
    signal_trigger_price: Optional[Decimal] = None
    signal_stop_price: Optional[Decimal] = None
    signal_target_price: Optional[Decimal] = None
    signal_time: int = field(init=False)
    def __post_init__(self):
        self.signal_time = self.timestamp

@dataclass
class OrderEvent(Event):
    """Represents an order sent to the exchange for execution."""
    order_id: str
    strategy_id: str
    symbol: str
    quantity: int
    order_type: OrderType
    direction: Side
    status: OrderStatus = OrderStatus.PENDING_SUBMIT
    limit_price: Optional[Decimal] = None
    stop_price: Optional[Decimal] = None
    linked_stop_price: Optional[Decimal] = None
    linked_target_price: Optional[Decimal] = None
    exchange_timestamp: Optional[int] = None
    filled_quantity: int = 0
    parent_order_id: Optional[str] = None # For linking triggered orders (e.g., stop -> market)

@dataclass
class FillEvent(Event):
    """Represents the execution of a trade for a given order."""
    order_id: str
    strategy_id: str
    symbol: str
    direction: Side
    quantity_filled: int
    fill_price: Decimal
    commission: Decimal
    linked_stop_price: Optional[Decimal] = None
    linked_target_price: Optional[Decimal] = None
    fill_time: int = field(init=False)
    def __post_init__(self):
        self.fill_time = self.timestamp